################################################################################
# ZSH Customizations
################################################################################
export DEFAULT_USER='$USER'
unsetopt PROMPT_SP
unset zle_bracketed_paste
################################################################################
# Prompt Customizations
################################################################################
# Terminal Colors
export CLICOLOR=1
export LSCOLORS=GxFxBxDxCxegedabagacad
################################################################################
# PATH Modificiations
################################################################################
export PATH=$PATH:.
export PATH=$PATH:/home/s7117/.local/bin
#################################################################################
# Aliases
################################################################################
# GUI File Explorer
alias exp="explorer.exe"
if [[ $(uname) != *"Darwin"* ]]; then
  alias open=openfunc
fi
### vi
alias view="vi -R"
### ls
alias ls="ls --color"
alias lsl="ls -1l"
alias lsa="ls -A"
alias lsld="ls -l -d */"
alias lsd="ls -d1 */"
alias lsf="ls -p | grep -v /"
### clear
alias clr="clear"
alias cls="clear && ls"
### cd ..
alias cdd="cd .."
### copy
alias cpdir="cp -avr"
### docker
alias docker_setup=setup_docker_install
alias drmi="docker rmi"
alias dils="docker images -a"
alias dcls="docker container ls -a"
alias drmc="docker container rm"
alias db="docker build"
alias diprune="docker image prune"
alias dcprune="docker container prune"
alias dclean=clean_docker
alias denv=create_docker_env
alias dshell=docker_env_shell
### trash
alias trash="rmtrash"
### python3
alias py3="python3"
### compression/archive
alias targz=targzfunc
alias untar=untarfunc
alias zipped=zipup
### git
alias github=github_clone
alias gitlab=gitlab_clone
### navigation
alias desktop="cd ~/Desktop"
alias downloads="cd ~/Downloads"
alias home="cd ~"
### gcc
#alias gcc="gcc-9"
### oh-my-zsh update
alias update_omz="~/OSConfigs/macos/update_omz.zsh"
### Multipass
alias mp="multipass"
################################################################################
################################################################################
################################################################################
# Functions
################################################################################
function git_setup () {
  git config --global core.autocrlf input
}

function github_clone() {                                                       
  VAR=$1;                                                                       
  git clone git@github.com:$VAR                                                 
}                                                                               
                                                                                
function gitlab_clone() {                                                       
  VAR=$1;                                                                       
  git clone git@gitlab.com:$VAR                                                 
}                                                                               
                                                                                
function targzfunc() {                                                          
  VAR=$1;                                                                       
  VAR=${VAR%/};                                                                 
  tar -zcvf "$VAR.tar.gz" ./"$VAR"                                              
}                                                                               
                                                                                
function untarfunc() {                                                          
  VAR=$1                                                                        
  VAR=${VAR}                                                                    
  tar -xvf ./"$VAR"                                                             
}

function openfunc() {
  VAR=$1
  (xdg-open $VAR &> /dev/null &)
}

function zipup() {
  VAR=$1
  VAR=${VAR%/}
  zip -r "$VAR.zip" ./"$VAR" 
}

function create_docker_env() {
  VAR=$1
  if [ -z $VAR ]
  then
    echo "ERROR: Argumnet required."
  else
    docker run --name $VAR --hostname "${VAR}_Docker" --restart-policy unless-stopped s7117/ubuntu_20_04_env
  fi
}

function docker_env_shell() {
  VAR=$1
  if [ -z $VAR ]
  then
    echo "ERROR: Container name required."
  else
    docker exec -u s7117 -w /home/s7117 $VAR /bin/zsh
  fi
}

function clean_docker() {                                                       
  docker container rm $(docker container ls -a -q)                              
  docker rmi $(docker images -a -q)                                             
}

function setup_docker_install() {
  sudo groupadd docker
  sudo usermod -aG docker $USER
}

################################################################################
# Setup Zsh Keybindings (for Arch)
################################################################################
# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[Shift-Tab]="${terminfo[kcbt]}"

# setup key accordingly
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"       beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"        end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"     overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}"  backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"     delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"         up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"       down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"       backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"      forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"     beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"   end-of-buffer-or-history
[[ -n "${key[Shift-Tab]}" ]] && bindkey -- "${key[Shift-Tab]}"  reverse-menu-complete

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start { echoti smkx }
	function zle_application_mode_stop { echoti rmkx }
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi
